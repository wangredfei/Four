1.Flask中数据加密 - 密码加密
==================================================
1.请求 和 响应
	1.文件上传
		1.注意问题
			表单中如果有文件上传的时候,必须遵循以下两个要求:
			1.提交方式 method 必须为 post
			2.表单的 enctype 属性值必须为 multipart/form-data
		2.服务器端处理
			1.request.files 获取上传的文件
				f = request.files['文件框的name值']
				注意:获取到的f对象(文件),是保存在缓存区中,而并非保存在磁盘上
			2.将文件保存到指定目录处
				f.save('static/'+f.filename)
		3.问题解决
			1.文件名称
				年月日时分秒微秒.扩展名 
				1.获取时间
					import datetime
					ftime=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
				2.获取扩展名
					ext = f.filename.split('.')[1]
				3.组合成新文件名
					fname = ftime+'.'+ext
			2.保存路径
				# 获取绝对路径
				basedir=os.path.dirname(__file__)
				# 拼成保存地址
				upload_path=os.path.join(basedir,'static/upload',filename)

				f.save(upload_path)
2.模型 - Models
	1.什么是模型
		模型,是根据数据库中表的结构而创建出来的class
		每一张表对应到编程语言中就是一个类
		类中的每个属性对应到表中就是表的每个列
	2.模型框架 - ORM
		1.什么是ORM
			ORM : Object Relational Mapping
						对象   关系       映射
		2.ORM的三大特征
			1.数据表(table)到编程类(class)的映射
				数据库中的每一张表对应到编程语言中都有一个类
			2.数据类型的映射
				数据库表中的列以及数据类型 对应到 类中也有对应的属性以及类型
			3.关系映射
				将数据库表与表之间的关系 对应到 编程语言中类与类之间的关系
		3.ORM的优点
			1.封装了数据库中几乎所有的操作,大大提高开发效率
			2.省略了庞大的数据访问层,即便不使用SQL编码也能完成对数据的CRUD操作
				C : Create
				R : Retrieve
				U : Update
				D : Delete
	3.Flask中的ORM框架

		Python中的ORM框架 - SQLAlchemy
		 pip3 install sqlalchemy
		Flask中使用的也是 SQLAlchemy,但中间需要使用 Flask-SQLAlchemy 连接 Flask 和 SQLAlchemy
		 pip3 install flask-sqlalchemy
	4.定义数据库 以及 连接数据库
		1.创建数据库
			create database 数据库名 default charset utf8 collate utf8_general_ci;

			推荐:
				1.Navicate for MySQL
				2.Power Designer 
		2.Flask中连接数据库
			from flask import Flask
			from flask_sqlalchemy import SQLAlchemy

			app = Flask(__name__)

			#指定数据库的配置给 app
			app.config['SQLALCHEMY_DATABASE_URI']='mysql://root:123456@localhost:3306/flask'
			#再将app交给SQLAlchemy,创建数据库实例
			db = SQLAlchemy(app) 
			# 以后在Flask中操作数据库的时候可以使用 db
	5.定义模型(重点)
		模型:类 (模型类 或 实体类)
		语法:
			class MODELNAME(db.Model):
				__tablename__ = "TABLENAME"
				COLUMN_NAME=db.Column(db.TYPE,OPTIONS)
				COLUMN_NAME=db.Column(db.TYPE,OPTIONS)
				... ...

				1.MODELNAME:定义模型类的名称,尽量参考表名
				2.TABLENAME:映射到数据库中表的名称
				3.COLUMN_NAME:属性名,映射到数据表中列的名称
				4.TYPE:映射到列的数据类型
				5.OPTIONS:列选项,如:是否唯一,默认值,加索引...

				db.TYPE 列类型如下:
				类型名       python类型       说明
				Integer      int              普通整数,32位
				SmallInteger int              小整数,16位
				BigInteger   int              不限精度整数
				Float        float            浮点数
				Numeric      deciaml.Decimal  定点数
				String       str              字符串
					db.String(30)
				Text         str              字符串
				Boolean      bool             布尔值
					db.Boolean -> tinyint
				Date         datetime.date    日期:年月日
				Time         datetime.time    时间:时分秒
				DateTime     datetime.datetime日期和时间:年月日时分秒


				OPTIONS 列选项:
				选项名         说明
				autoincrement  如果设置为True表示该列要自动增长
				primary_key    如果设置为True表示该列为主键
				unique         如果设置为True表示该列的值唯一
				index          如果设置为True表示该列创建索引
				nullable       如果设置为True表示该列允许为空
											 默认是非空 - False
				default        为列指定默认值

			练习:
				1.创建Student实体类
					表名:student
		属性:	  1.id : 主键自增
						2.sname : 姓名,长度为30的字符串
						3.sage : 年龄,整数
						4.isActive : 启用状态,默认为True
				2.创建Teacher实体类
					表名:teacher
		属性:		1.id : 主键自增
						2.tname : 姓名,长度为30字符串
						3.tage : 年龄,整数
				3.创建Course实体类
					表名:course
		属性:		1.id , 自增,主键
						2.cname,课程名称,长度为50的字符串,允许为空


		作业:
			1.创建数据库 Blog
			2.分析login 以及 regsiter 的业务,并得出 用户实体类
			3.根据分析出来的用户实体,创建实体类(属性),并映射回数据库









表名: users
类名: Users

聚集索引 和 非聚集索引








"a.jpg".split('.')[1]







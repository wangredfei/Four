1.关系映射
	1.一对多关系映射
	2.一对一关系映射
		class User(db.Model):
			xxxx 

			wife=db.relationship("Wife",backref="user",uselist=False)

		class Wife(db.Model):
			xxxx
			
			user_id=db.Column(db.Integer,db.ForeignKey('user.id'),unique=True)
	3.多对多关系映射
		1.什么是多对多
			A表中的一条数据可以与B表中的任意多条数据相关联
			B表中的一条数据可以与A表中的任意多条数据相关联
		2.在数据库中的体现
			在数据库中使用第三张关联表
		3.在Flask-SQLAlchemy中的实现
			1.创建关联表(实体类)
				class TeacherStudent(db.Model):

					__tablename__ = "teacher_student"

					id=db.Column(db.Integer,primary_key=True)

					teacher_id=db.Column(db.Integer,db.ForeignKey('teacher.id'))

					student_id=db.Column(db.Integer,db.ForeignKey('student.id'))
			2.增加关联属性 和 反向引用关系属性
				class Teacher(db.Model):
					__tablename__ = "teacher"

					xxx xxx

					students = db.relationship(
						"Student",
						secondary="teacher_student",
						lazy="dynamic",
						backref=db.backref("teachers",lazy="dynamic")
					)
2.cookies / cookie
	1.什么是cookies
		cookies是一种数据存储手段
		将一段文本保存在客户端(浏览器)的一种存储手段，并可以长时间保存
	2.cookies的使用场景
		1.记住密码
		2.记住搜索关键词
	3.特点
		1.cookies是以浏览器为单位，不同的浏览器之间的cookies是不共享的
		2.各个网站之间的cookies也是相互独立的，不共享

		优点：
			1.可以解决服务器端的一些存储问题
				允许将非重要的数据保存在客户端浏览器中，从而节省服务器端的位置
			2.可以长时间保存数据
		缺点：
			1.明文显示所有的数据
			2.cookie中的内容在客户端是允许被修改的
	3.Flask中使用 cookies
		1.保存cookies
			要通过 响应对象 将cookies从服务器端带到浏览器上
			响应对象：
				1.resp = redirect('/重定向地址')
					resp 是一个响应对象
				2.from flask import make_response
					resp = make_response("字符串"|render_template())
					resp 是一个响应对象
					return resp
			添加cookies的语法
				响应对象.set_cookie(key,value,max_age)
					key:要保存的cookie的名称
					value:要保存的cookie的值
					max_age:该cookie存活的最大时间(以s为单位，但s省略不写)
						1. 1 表示1秒
						2. 60 表示1分钟
						3. 60*60 表示1小时
						4. 60*60*24 表示1天
						5. 60*60*24*365 表示1年
				ex:
					from flask import make_response
					@app.route('/01-addcookie')
					def addcookie_views():
						resp=make_response("添加cookie成功")
						resp.set_cookie("uname","wangwc",60*60*24*365)
						return resp
		2.获取cookies
			每当浏览器向服务器发送请求时，都会把当前站点的cookies们都封装到request中并带到服务器上
			语法：
				request.cookies
		3.删除cookies
			响应对象.delete_cookie('key')
3.session - 会话
	1.什么是session
		session是保存在服务器上，为每个浏览器所开辟的一段空间
	2.保存进session的数据
		服务器端在会话过程中经常要用到的数据要保存进session
	3.session在Flask中的实现手段
		1.配置 SECRET_KEY
			app.config['SECRET_KEY']='aixieshaxiesha'
		2.使用session
			from flask import session
			1.保存数据到session中
				session['key'] = value
			2.从session中获取数据
				value=session['key']
				value=session.get('key')

				if 'key' in session:
					xxxx xxxx
			3.从session中删除数据
				del session['key']








{
	'csrftoken': 'HCDh1rsAlRRvdc3T9grSbW2nLGtZT8Ih6Ljqm0zvkEKnVfFS9pEpC0rD5MzBPtjy', 
	'uname': 'wangwc', 
	'Pycharm-b723704f': '18dbae5b-b244-47d1-80f5-c6ea522f3ef9'
}





resp = redirect('/')
return resp







